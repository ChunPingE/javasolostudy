27. if와 while 문 
제어문 작성순서대로 실행 조건문을 쓰면 이 제어가 어느정도 바꿀수잇다.
조건을 비교할때 비교연산자를 사용

while도 조건을 검사해서 참일때만 실행하는게 비슷함.

if는 한번만 검사하고 실행 while은 조건이 참이면 어떤 조건을 찾을때 까지 계속실행

한구절로 인식하기 위해 {} 안에 넣기
중괄호 내려쓰기 vs 올려쓰기 일관되게 통일을 하는게 좋다.

그런데 if는 한번만 물어보니까 계속 반복해야하면 while로 조건을 물으면 된다
프로그램 제어구조를 직접 적어보고 따라가보자.

System.out.print("국어1:");
kor1 = sc.nextInt();

while (kor1 < 0 || kor1 > 100) {
	// if (!(kor1>=0 && kor1<=100)) {
	// if (kor1 < 0 || kor1>100) {}
	System.out.println("성적 범위(0~100)을 벗어낫습니다.");
	System.out.print("국어1:");
	kor1 = sc.nextInt();
}

28. 제어구조 do while 문
위의 예제는 반복되는 문장이 생겨서 불편하다. 지양해야한다. 흐름을 제어해서 가능하기 때문임.


do {
	System.out.print("국어1:");
	kor1 = sc.nextInt();
	if (kor1 < 0 || kor1 > 100) {
		System.out.println("성적 범위(0~100)을 벗어낫습니다.");
	}
} while(kor1 < 0 || kor1 > 100);
do while문은 흐름이 뒤로감으로써 무조건 한번은 실행하고 확인하고 위로 올라가거나 다음 흐름으로 간다.

29. 제어구조 for문
for문은 특정 수 만큼 반복한다.
국어 1 2 3이 반복된다. 조건처리와는 다르고 갯수만큼 반복해야한다.
첫번째거만 세번반복하게 해보자.

whlie문을 억지로쓰면
int i=0
while(i<3){
	i++;
}
해주면 가능은 하다. 임의적으로 갯수에 맞게하는 패턴을 만들어 본것이다.
그런데 이 세가지 조건이 한눈에 보여야 몇번 반복인지 알 수 있다.
그래서 for문이 생겨나게 되었다.
for(초기화문; 조건식; 증감식) 으로 작성한다.
for(int i = 0 ; i < 3 ; i++){}
일반적으로 패턴은 그대로 두고 출력해서 i+1로 하는게 좋다.
일반적으로 index는 0부터 시작하기 때문임 1부터 시작하려면 i말고 n을쓰자.

만약 거꾸로 3 2 1하고싶다면?
for(int i = 0 ; i < 3 ; i++){
	System.out.printf("\t국어 %d : %3d\n", 3-i, kor1);
}
!!! 몇번 반복하는지 한눈에 파악하기위해 반복문을 건들지말고 출력을 건들자 !!!
for( ; i<3; ){}
for( ; true; ){}
앞뒤 초기화문 증감연산자가 빠진경우 오류가 아님!
조건식에 true? false나올때까지 반복
for( ; ; ){} 조건도 없고 식도 없다면 무한반복
for( int x = 0, int y = 0 ; x<0; x++, y=x ){}
초기화식이 두개 증감식이 두개인 경우? 오류안남 작성가능

무한반복은 while로 사용하자. 용도에 맞게 사용하기.

30. 프로그래머가 수학을 못하면 만들게 되는 코드 #1
프로그래머는 수학을 잘해야한다. why?
1부터 10까지 반복하면서더해본다면?
for (int i = 0 ; i < 10 ; i++) {
	total += 1+i;
}
for문으로 할 수도 있다.
for (int i = 0 ; i < 5 ; i++) {
	total += 3+i;
}
3부터 7까지면? 이렇게 하면됨

그런데 여기서 문제가 발생한다. 프로그래머는 절차를 만드는 사람임. 그래서 문제없다고 생각함.
그런데 이러면 5번 하고 연산이 두번씩 사용됨. 최소 4개이상의 연산이 복사됨.
합을 구하는 공식이 있다.
사진참조
등차수열의 공식을 사용하면 메모리도 시간도 아낄 수잇다.

프로그래머는 절차는 만드는 사람이기때문에 만들엇다고 해도 잘못된게 아니다.
하지만 수학을 조금만이라도 알면 짧은 연산식으로 출력결과를 나타낼수잇다.
고민을 잘해보자





































